MEMORY {
    ZP:     start = $00,    size = $0100, type = rw, file = "";
    SP:     start = $0100,  size = $0100, type = rw, file = "";
    OAM:    start = $0200,  size = $0100, type = rw, file = "";
    RAM:    start = $0300,  size = $0500, type = rw, file = "";
    SRAM_00:start = $6000,  size = $2000, type = rw, file = "";

    HDR:    start = $0000,  size = $0010, type = ro, file = %O, fill = yes, fillval = $00;

    PRGA_00:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $00;
    PRGA_01:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $01;
    PRGA_02:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $02;
    PRGA_03:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $03;
    PRGA_04:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $04;
    PRGA_05:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $05;
    PRGA_06:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $06;
    PRGA_07:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $07;
    PRGA_08:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $08;
    PRGA_09:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $09;
    PRGA_0a:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $0a;
    PRGA_0b:start = $a000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $0b;

    # blank space in my hack. i've set it up for bankable dpcm though
    PRGC_00:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $0c;
    PRGC_01:start = $c000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $0d;

    PRGLow: start = $8000,  size = $2000, type = ro, file = %O, fill = yes, fillval = $ff, bank = $0e;
    
    ALIGN:  start = $e000, size = $25, type = ro, file = %O, fill = yes, bank = $0f;
    PRGFix: start = $e025,  size = $1fdb, type = ro, file = %O, fill = yes, fillval = $ff, bank = $0f;

    CHR:    start = $0000,  size = $10000, type = ro, fill = yes, file = %O, fillval = $00;
}

SEGMENTS {
    INESHDR:    load = HDR,     type = ro;
    ZEROPAGE:   load = ZP,      type = zp;
    SHORTRAM:   load = SP,      type = bss;
    SMCCODE:    load = PRGA_01, type = rw,  run = SP,     define = yes;
    OAM:        load = OAM,     type = bss;
    BSS:        load = RAM,     type = bss;
    SRAM:       load = SRAM_00, type = bss, optional=yes;

    # User created code defaults to the first A0 bank
    OBJECT:     load = PRGA_00, type = ro;
    PLAYER:     load = PRGA_01, type = ro;
    LEVEL:      load = PRGA_02, type = ro;
    TITLE:      load = PRGA_03, type = ro;
    RENDER:     load = PRGA_03, type = ro;
    METASPRITE: load = PRGA_04, type = ro;

[LEVEL SEGMENTS]
    
    MUSIC:      load = PRGA_06, type = ro;

    DPCM:       load = PRGC_00, type = ro, optional=yes;

    CODE:       load = PRGLow,  type = ro;
    LOWCODE:    load = PRGLow,  type = ro;
    COLLISION:  load = PRGLow,  type = ro;

    FIXED:      load = PRGFix,  type = ro;
    OAMALIGNED: load = ALIGN,   type = ro;
    
    VECTORS:    load = PRGFix, type = ro,  start = $fffa;

    CHR:        load = CHR,     type = ro;
    
    # segments used by C code
    ONCE:     load = PRGLow,            type = ro,  optional = yes;
    RODATA:   load = PRGLow,            type = ro,  define   = yes;
    DATA:     load = PRGLow, run = RAM, type = rw,  define   = yes;
}
SYMBOLS {
    __STACKSIZE__: type = weak, value = $20; # 32 bytes of stack
}